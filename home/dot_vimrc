"-------------------------------------------------------------------------------
" Vi IMproved
"-------------------------------------------------------------------------------

set nocompatible

filetype on
syntax enable

"-------------------------------------------------------------------------------
" Plugin manager
"-------------------------------------------------------------------------------

let s:data_dir = expand('$HOME/.vim')
let s:plugin_dir = s:data_dir . '/plugged'
let s:plug_file = s:data_dir . '/autoload/plug.vim'
let &runtimepath .= ',' . s:data_dir

if empty(glob(s:plug_file))
  silent execute '!curl -fLo ' . s:plug_file . ' --create-dirs -k ' .
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * ++once PlugInstall --sync
                 \ | call mkdir(&undodir, "p")
                 \ | call mkdir(&dir, "p")
                 \ | call mkdir(&backupdir, "p")
                 \ | call mkdir(fnamemodify(&spellfile, ":h"), "p")
                 \ | source $MYVIMRC
endif

call plug#begin(s:plugin_dir)

" Vim help for plugin manager
Plug 'junegunn/vim-plug'

" Highlight trailing whitespace characters
Plug 'ntpeters/vim-better-whitespace'

" Status and tabline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bluz71/vim-mistfly-statusline'

" Indicate added, modified and removed lines in the sign column
Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'

" Call any arbitrary Git command
Plug 'tpope/vim-fugitive'

" General-purpose command-line fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Conquer of completion
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" Use fzf instead of coc.nvim built-in fuzzy finder
Plug 'antoinemadec/coc-fzf', { 'branch': 'release' }

" Themes
Plug 'bluz71/vim-moonfly-colors'
Plug 'bluz71/vim-nightfly-colors'

" Icons
Plug 'ryanoasis/vim-devicons'

call plug#end()

"-------------------------------------------------------------------------------
" Text formatting
"-------------------------------------------------------------------------------

set encoding=utf-8

set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround

set autoindent
set nosmartindent
set cindent
set cinoptions=:0,l1,g0

"-------------------------------------------------------------------------------
" Color scheme
"-------------------------------------------------------------------------------

set background=dark
set termguicolors

function! ColumnHighlighting() abort
  highlight LineNr ctermfg=darkgray guifg=darkgray
  highlight SignColumn ctermbg=NONE guibg=NONE
  highlight ColorColumn ctermbg=darkgray guibg=darkgray
endfunction

function! SignifyHighlighting() abort
  highlight SignifySignAdd ctermfg=green guifg=#00ff00 cterm=NONE gui=NONE
  highlight SignifySignChange ctermfg=yellow guifg=#ffff00 cterm=NONE gui=NONE
  highlight SignifySignDelete ctermfg=red guifg=#ff0000 cterm=NONE gui=NONE
endfunction

function! GitGutterHighlighting() abort
  highlight GitGutterAdd ctermfg=green guifg=#00ff00 cterm=NONE gui=NONE
  highlight GitGutterChange ctermfg=yellow guifg=#ffff00 cterm=NONE gui=NONE
  highlight GitGutterDelete ctermfg=red guifg=#ff0000 cterm=NONE gui=NONE
endfunction

function! DefaultThemeHighlighting() abort
  call ColumnHighlighting()
  call SignifyHighlighting()
  call GitGutterHighlighting()
endfunction

augroup DefaultThemeAutoCommands
  autocmd!
  au ColorScheme default call DefaultThemeHighlighting()
augroup END

let g:moonflyItalics = v:true
let g:moonflyTransparent = v:true
let g:moonflyUndercurls = v:false

let g:nightflyItalics = v:true
let g:nightflyTransparent = v:true
let g:nightflyUndercurls = v:false

colorscheme nightfly

"-------------------------------------------------------------------------------
" UI settings
"-------------------------------------------------------------------------------

set nocursorline
set nofoldenable
set noshowmode
set noruler
set number
set numberwidth=5
set signcolumn=yes
set colorcolumn=81,82
set showcmd
set modeline
set cmdheight=2
set showtabline=2
set laststatus=2

let g:airline_theme = 'deus'

" Status line
let g:airline_disable_statusline = 1

let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols_ascii = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Section A
let g:airline_detect_spelllang = 0

" Section B
let g:airline_symbols.branch = ''
let g:airline#extensions#branch#format = 2
let g:airline#extensions#branch#sha1_len = 10

" Section C
let g:airline_stl_path_style = 'short'
let g:airline_section_c_only_filename = 1
let g:airline_section_c = airline#section#create_left(['file','readonly'])

" Section Y
let g:airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'
let g:airline#extensions#searchcount#show_search_term = 0
let g:airline#extensions#searchcount#search_term_limit = 20

" Section Z
let g:airline_symbols.linenr = ' '
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.colnr = ' '

" Tab line
let g:airline#extensions#tabline#enabled = 1

let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_count = 1

let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#overflow_marker = '…'

function! TabTitleFormatter(n) abort
  return ' '
endfunction

let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#fnamecollapse = 1
let g:airline#extensions#tabline#tabtitle_formatter = 'TabTitleFormatter'

let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#show_close_button = 0

let g:mistflySeparatorSymbol = ''
let g:mistflyProgressSymbol = '↓'
let g:mistflyActiveTabSymbol = '▪'
let g:mistflyGitBranchSymbol = ''
let g:mistflyErrorSymbol = 'E'
let g:mistflyWarningSymbol = 'W'
let g:mistflyInformationSymbol = 'I'
let g:mistflyEllipsisSymbol = '…'
let g:mistflyTabLine = v:false
let g:mistflyWithFileIcon = v:true
let g:mistflyWithGitBranch = v:true
let g:mistflyWithGitStatus = v:true
let g:mistflyWithDiagnosticStatus = v:true
let g:mistflyWithSessionStatus = v:true
let g:mistflyWithSearchCount = v:true
let g:mistflyWithSpellStatus = v:true
let g:mistflyWithIndentStatus = v:false

let g:signify_disable_by_default = 0
let g:signify_sign_show_count = 1
let g:signify_number_highlight = 0
let g:signify_line_highlight = 0

let g:gitgutter_enabled = 0
let g:gitgutter_signs = 1
let g:gitgutter_highlight_linenrs = 0
let g:gitgutter_highlight_lines = 0
let g:gitgutter_map_keys = 0

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
let g:fzf_preview_window = ['up,50%', 'ctrl-/']

let g:coc_global_extensions = ['coc-clangd']

"-------------------------------------------------------------------------------
" Visual cues
"-------------------------------------------------------------------------------

set hlsearch
set incsearch
set ignorecase
set smartcase

set listchars=tab:▸\ ,trail:‧,extends:»,precedes:«
set list
set wrap
set linebreak
set showbreak=↳
set breakindent
set showmatch
set matchtime=3
set scrolloff=3

set belloff=all

let g:better_whitespace_ctermcolor = 'green'
let g:better_whitespace_guicolor = 'green'
let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 0

"-------------------------------------------------------------------------------
" Behavioural settings
"-------------------------------------------------------------------------------

set autoread
set hidden
set ttimeoutlen=0
set updatetime=100
set backspace=indent,eol,start
set nostartofline
set completeopt=menuone,longest
set shortmess+=cI
set wildignore^=*.o
set path=$PWD/**

set lazyredraw
set ttyfast

set undofile
set swapfile
set nobackup
set nowritebackup
set spelllang=en
set nospell

let &undodir = s:data_dir . '/undo'
let &dir = s:data_dir . '/swap'
let &backupdir = s:data_dir . '/backup'
let &spellfile = s:data_dir . '/spell/wordlist.utf-8.add'

"-------------------------------------------------------------------------------
" Key mappings
"-------------------------------------------------------------------------------

let mapleader = '\'

nnoremap <silent> <F5> :set spell! spell?<CR>
nnoremap <silent> <F6> :set list! list?<CR>
nnoremap <silent> <F7> :set wrap! wrap?<CR>
nnoremap <F8> :nohlsearch<CR>
nnoremap <silent> <F9> :set paste! paste?<CR>

inoremap jk <ESC>

nnoremap j gj
nnoremap k gk

vnoremap < <gv
vnoremap > >gv

" Yank to the end of the line
nnoremap Y y$

" Do nothing instead of entering Ex mode
nnoremap Q <nop>

nnoremap <silent> <C-h> :bprevious<CR>
nnoremap <silent> <C-l> :bnext<CR>

nnoremap <silent> <C-t> :tab split<CR>

noremap <silent> F :py3file ~/clang-format.py<CR>

" fugitive mappings
nnoremap <silent> <leader>gg :Git<CR>
nnoremap <silent> <leader>gl :Git log<CR>
nnoremap <silent> <leader>gb :Git blame<CR>
nnoremap <silent> <leader>gd :Git diff<CR>
nnoremap <silent> <leader>gs :Git diff --cached<CR>
nnoremap <silent> <leader>ga :Git add<CR>
nnoremap <silent> <leader>gu :Git add --update<CR>
nnoremap <silent> <leader>gp :Git add --patch<CR>
nnoremap <silent> <leader>gc :Git commit<CR>
nnoremap <silent> <leader>gm :Git commit --amend<CR>
nnoremap          <leader>gr :Git rebase --interactive<space>
nnoremap <silent> <leader>gt :Git rebase --continue<CR>
nnoremap <silent> <leader>go :Git mergetool<CR>
nnoremap          <leader>gk :Git checkout<space>
nnoremap <silent> <leader>g- :Git checkout -<CR>

nnoremap <silent> <leader>gf :Gdiffsplit<CR>
nnoremap <silent> <leader>gv :Gvdiffsplit<CR>
nnoremap <silent> <leader>gh :Ghdiffsplit<CR>

" fzf mappings
nnoremap <silent> <C-p>     :Files<CR>
nnoremap <silent> <leader>f :GFiles<CR>
nnoremap <silent> <leader>d :GFiles?<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>h :History<CR>

nnoremap          <leader>s :Rg<space>
nnoremap <silent> <leader>w :Rg <C-r><C-w><CR>
xnoremap <silent> <leader>v y:Rg <C-r>"<CR>

nnoremap <silent> <leader>l :Lines<CR>
nnoremap <silent> <leader>k :BLines<CR>

nnoremap <silent> <leader>c :Commits<CR>
nnoremap <silent> <leader>x :BCommits<CR>

nnoremap <silent> <leader>m :Commands<CR>
nnoremap <silent> <leader>t :Helptags<CR>

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

imap <C-x><C-k> <plug>(fzf-complete-word)
imap <C-x><C-f> <plug>(fzf-complete-path)
imap <C-x><C-l> <plug>(fzf-complete-line)

" coc mappings
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

nnoremap <silent> <leader>q :<C-u>CocList diagnostics<CR>

nmap <silent> gd <plug>(coc-definition)
nmap <silent> gy <plug>(coc-type-definition)
nmap <silent> gi <plug>(coc-implementation)
nmap <silent> gc <plug>(coc-declaration)
nmap <silent> gr <plug>(coc-references)

nmap <silent> K :call CocActionAsync('doHover')<CR>

nmap <leader>r <Plug>(coc-rename)

nmap <leader>a <plug>(coc-codeaction-cursor)

xmap if <plug>(coc-funcobj-i)
omap if <plug>(coc-funcobj-i)
xmap af <plug>(coc-funcobj-a)
omap af <plug>(coc-funcobj-a)
xmap ic <plug>(coc-classobj-i)
omap ic <plug>(coc-classobj-i)
xmap ac <plug>(coc-classobj-a)
omap ac <plug>(coc-classobj-a)

nnoremap <silent> <leader>i :<C-u>CocCommand clangd.switchSourceHeader<CR>

"-------------------------------------------------------------------------------
" Auto commands
"-------------------------------------------------------------------------------

function! ClangFormatOnWrite() abort
  let l:formatdiff = 1
  py3file ~/clang-format.py
endfunction

augroup VimrcAutoCommands
  autocmd!

  " tpp files are actually cpp files
  au BufNewFile,BufRead *.tpp setlocal filetype=cpp

  " Modify default number of spaces that a <Tab> counts for
  au FileType cmake,lua,vim setlocal softtabstop=2
  au FileType cmake,lua,vim setlocal shiftwidth=2

  " Enable spell checking for Git commit and Markdown files
  au FileType gitcommit,markdown setlocal spell

  " Always start editing a file in case a swap file exists
  au SwapExists * let v:swapchoice = 'e'

  " Return to last edit position when opening files
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
               \ |   exe "normal! g`\""
               \ | endif

  " Resize splits when the window is resized
  au VimResized * exe "normal! \<C-w>="

  " Format cpp files on write
  au BufWritePre *.h,*.hpp,*.tpp,*.c,*.cc,*.cpp call ClangFormatOnWrite()

  " Highlight the symbol and its references when holding the cursor
  au CursorHold,CursorHoldI * silent call CocActionAsync('highlight')

  " Update signature help on jump placeholder
  au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

augroup END
